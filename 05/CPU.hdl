// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    /**
     * Chip: PC.
     * Internal pins: outAReg, loadPC, outJump.
     */
    PC
    (
        in = outAReg, inc = true, load = loadPC, reset = reset,
        out[0..14] = pc
    );
    Mux(a = false, b = outJump, sel = ins0, out = loadPC);

    /**
     * Chip: ALU.
     * Internal pins:
     *      outDReg, outAMMux,
     *      cInsC1, cInsC2, cInsC3, cInsC4, cInsC5, cInsC6,
     *      outALUzr, outALUvalue.
     */
    ALU
    (
        x = outDReg, y = outAMMux,
        zx = cInsC1, nx = cInsC2, zy = cInsC3, ny = cInsC4,
        f = cInsC5, no = cInsC6,
        zr = outALUzr, out = outALUvalue
    );
    Or16(a = outALUvalue, b = false, out = outM);

    /**
     * Chip: DRegister.
     * Internal pins: cInsD2.
     */
    Register(in = outALUvalue, load = cInsD2, out = outDReg);

    /**
     * Chip: AMMux.
     * Internal pins: cInsA.
     */
    Mux16(a = outAReg, b = inM, sel = cInsA, out = outAMMux);

    /**
     * Chip: ARegister.
     * Internal pins: outALUinsMux, loadAReg, ins0, cInsD1, c0.
     */
    Register(in = outALUinsMux, load = loadAReg, out = outAReg);
    Not(in = ins0, out = c0);
    Or(a = c0, b = cInsD1, out = loadAReg);

    /**
     * Chip: ALUinsMux.
     * Internal pins: selALUinsMux.
     */
    Mux16
    (
        a = outALUvalue, b = instruction, sel = selALUinsMux,
        out = outALUinsMux
    );
    Not(in = ins0, out = selALUinsMux);

    /**
     * External pin: writeM.
     * Internal pin: cInsD3.
     */
    And(a = cInsD3, b = true, out = writeM);

    /**
     * External pin: addressM.
     */
    Or16(a = outAReg, b = false, out[0..14] = addressM);

    /**
     * External pin: instruction.
     */
    Or16
    (
        a = instruction, b = false,
        out[0] = cInsJ3,
        out[1] = cInsJ2,
        out[2] = cInsJ1,
        out[3] = cInsD3,
        out[4] = cInsD2,
        out[5] = cInsD1,
        out[6] = cInsC6,
        out[7] = cInsC5,
        out[8] = cInsC4,
        out[9] = cInsC3,
        out[10] = cInsC2,
        out[11] = cInsC1,
        out[12] = cInsA,
        out[15] = ins0,
    );
}

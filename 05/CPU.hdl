// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    /**
     * Run `CPU.tst` inside `Hardware Simulator`.
     * http://nand2tetris-questions-and-answers-forum.32033.n3.nabble.com/CPU-external-test-td4025639.html
     *
     * Chip: PC.
     * Internal pins: outAReg, loadPC, outJump, ins0.
     */
    PC
    (
        in = outAReg, inc = true, load = loadPC, reset = reset,
        out[0..14] = pc
    );
    Mux(a = false, b = outJump, sel = ins0, out = loadPC);

    /**
     * Chip: ALU.
     * Internal pins:
     *      outDReg, outAMMux,
     *      cInsC1, cInsC2, cInsC3, cInsC4, cInsC5, cInsC6,
     *      outALUzr, outALUng, outALUvalue.
     */
    ALU
    (
        x = outDReg, y = outAMMux,
        zx = cInsC1, nx = cInsC2, zy = cInsC3, ny = cInsC4,
        f = cInsC5, no = cInsC6,
        zr = outALUzr, ng = outALUng, out = outALUvalue
    );
    Or16(a = outALUvalue, b = false, out = outM);

    /**
     * Chip: DRegister.
     * Internal pin: cInsD2.
     */
    DRegister(in = outALUvalue, load = cInsD2, out = outDReg);

    /**
     * Chip: AMMux.
     * Internal pin: cInsA.
     */
    Mux16(a = outAReg, b = inM, sel = cInsA, out = outAMMux);

    /**
     * Chip: ARegister.
     * Internal pins: outALUinsMux, loadAReg, cInsD1, c0.
     */
    ARegister(in = outALUinsMux, load = loadAReg, out = outAReg);
    Not(in = ins0, out = c0);
    Or(a = c0, b = cInsD1, out = loadAReg);

    /**
     * Chip: ALUinsMux.
     * Internal pin: selALUinsMux.
     */
    Mux16
    (
        a = outALUvalue, b = instruction, sel = selALUinsMux,
        out = outALUinsMux
    );
    Not(in = ins0, out = selALUinsMux);

    /**
     * External pin: writeM.
     * Internal pin: cInsD3.
     */
    And(a = cInsD3, b = true, out = writeM);

    /**
     * External pin: addressM.
     */
    Or16(a = outAReg, b = false, out[0..14] = addressM);

    /**
     * External pin: instruction.
     */
    And16
    (
        a = instruction,

        b[0] = ins0,
        b[1] = ins0,
        b[2] = ins0,
        b[3] = ins0,
        b[4] = ins0,
        b[5] = ins0,
        b[6] = ins0,
        b[7] = ins0,
        b[8] = ins0,
        b[9] = ins0,
        b[10] = ins0,
        b[11] = ins0,
        b[12] = ins0,

        out[0] = cInsJ3,
        out[1] = cInsJ2,
        out[2] = cInsJ1,
        out[3] = cInsD3,
        out[4] = cInsD2,
        out[5] = cInsD1,
        out[6] = cInsC6,
        out[7] = cInsC5,
        out[8] = cInsC4,
        out[9] = cInsC3,
        out[10] = cInsC2,
        out[11] = cInsC1,
        out[12] = cInsA
    );
    Or(a = instruction[15], b = false, out = ins0);

    /**
     * Handle jump instructions: j1-j2-j3.
     * Inputs: cInsJ1, cInsJ2, cInsJ3.
     * Output: outJump.
     *
     * Case 1: 0-?-? || 1-?-?.
     * Internal pins:
     *      aj1, bj1,
     *      aj2aj1, bj2aj1,
     *      aj2bj1, bj2bj1.
     */
    Mux(a = aj1, b = bj1, sel = cInsJ1, out = outJump);
    Mux(a = aj2aj1, b = bj2aj1, sel = cInsJ2, out = aj1);
    Mux(a = aj2bj1, b = bj2bj1, sel = cInsJ2, out = bj1);

    /**
     * Case 2: 0-0-0 || 0-0-1.
     * Internal pins: c1, c2, c3.
     */
    Mux(a = false, b = c3, sel = cInsJ3, out = aj2aj1);
    Not(in = outALUng, out = c1);
    Not(in = outALUzr, out = c2);
    And(a = c1, b = c2, out = c3);

    /**
     * Case 3: 0-1-0 || 0-1-1.
     * Internal pin: c4.
     */
    Mux(a = outALUzr, b = c4, sel = cInsJ3, out = bj2aj1);
    Not(in = outALUng, out = c4);

    /**
     * Case 4: 1-0-0 || 1-0-1.
     * Internal pin: c5.
     */
    Mux(a = outALUng, b = c5, sel = cInsJ3, out = aj2bj1);
    Not(in = outALUzr, out = c5);

    /**
     * Case 5: 1-1-0 || 1-1-1.
     * Internal pin: c6.
     */
    Mux(a = c6, b = true, sel = cInsJ3, out = bj2bj1);
    Or(a = outALUzr, b = outALUng, out = c6);
}
